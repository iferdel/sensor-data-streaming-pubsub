{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "default": false,
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "accG"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "be9ijnandyz9ce"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT sensor_measurement.time, sensor_measurement.measurement, sensor.serial_number\r\nFROM sensor_measurement INNER JOIN sensor\r\n  ON sensor_measurement.sensor_id = sensor.id\r\nWHERE sensor.serial_number in ($serial_number)\r\nORDER BY time DESC \r\nLIMIT 100000",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "de9iten8jjqiof"
          },
          "hide": false,
          "refId": "B"
        }
      ],
      "title": "Acceleration $serial_number",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "de9iten8jjqiof"
      },
      "description": "Disk and buffer writes over time, broken down by:\n- writes_mbps – Total physical disk writes performed by PostgreSQL backends during query execution, as seen by the OS. This is the most accurate view of actual I/O load (from pg_stat_kcache.exec_writes).\n- shared_buffer_mbps – Data flushed from PostgreSQL’s shared buffer cache to disk. These are typically managed by checkpoints or the background writer.\n- local_buffer_mbps – Writes to local (non-shared) buffers, often related to unlogged or temporary tables. These are buffered but not part of shared memory.\n- temp_buffer_mbps – Buffer writes for temporary data during execution, such as sorting or hashing operations that spill to disk.\n- wal_generated_mbps – Volume of WAL (Write-Ahead Log) data generated. This doesn’t reflect immediate disk writes — WAL data is first written to memory and may be flushed asynchronously depending on parameters like wal_writer_delay and commit_delay.",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": false,
            "axisLabel": "",
            "axisPlacement": "left",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 13,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "always",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 1,
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "MB/s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 11,
        "x": 12,
        "y": 0
      },
      "id": 3,
      "links": [
        {
          "targetBlank": true,
          "title": "pg_stat_statements - track statistics of SQL planning and execution",
          "url": "https://www.postgresql.org/docs/current/pgstatstatements.html#PGSTATSTATEMENTS"
        }
      ],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "timezone": [
          "browser"
        ],
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "de9iten8jjqiof"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH deltas AS (\n    SELECT\n        created,\n        extract('epoch' from created - lag(d.created) OVER (w)) AS delta_seconds,\n        d.exec_writes - lag(d.exec_writes) OVER (w) AS delta_exec_writes,\n        d.shared_blks_written - lag(d.shared_blks_written) OVER (w) AS delta_shared_blks_written,\n        d.local_blks_written - lag(d.local_blks_written) OVER (w) AS delta_local_blks_written,\n        d.temp_blks_written - lag(d.temp_blks_written) OVER (w) AS delta_temp_blks_written,\n        d.wal_bytes - lag(d.wal_bytes) OVER (w) AS delta_wal_bytes,\n        stats_reset\n    FROM\n        statements_history.snapshots AS d\n    WHERE\n        created > now() - INTERVAL '2 hours'\n    WINDOW\n        w AS (PARTITION BY stats_reset ORDER BY created ASC)\n)\nSELECT\n    created AS \"time\",\n    delta_exec_writes / 1024 / 1024 / delta_seconds AS writes_mbps,\n    (delta_shared_blks_written * 8.0) / 1024 / delta_seconds AS shared_buffer_mbps,\n    (delta_local_blks_written * 8.0) / 1024 / delta_seconds AS local_buffer_mbps,\n    (delta_temp_blks_written * 8.0) / 1024 / delta_seconds AS temp_buffer_mbps,\n    delta_wal_bytes / 1024 / 1024 / delta_seconds AS wal_generated_mbps\nFROM\n    deltas\nORDER BY\n    created ASC;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "timeFrom": "15m",
      "title": "Writes to Disk and Buffer Flushes",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "de9iten8jjqiof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "exec_time"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 12,
        "y": 7
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "de9iten8jjqiof"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH deltas AS (\n    SELECT\n        st.created,\n        st.queryid,\n        st.rolname,\n        st.datname,\n        s.stats_reset,\n        q.query,\n        st.calls - lag(st.calls) OVER (query_w) AS delta_calls,\n        st.plans - lag(st.plans) OVER (query_w) AS delta_plans,\n        st.rows - lag(st.rows) OVER (query_w) AS delta_rows,\n        st.shared_blks_hit - lag(st.shared_blks_hit) OVER (query_w) AS delta_shared_blks_hit,\n        st.shared_blks_read - lag(st.shared_blks_read) OVER (query_w) AS delta_shared_blks_read,\n        st.temp_blks_written - lag(st.temp_blks_written) OVER (query_w) AS delta_temp_blks_written,\n        st.total_exec_time - lag(st.total_exec_time) OVER (query_w) AS delta_total_exec_time,\n        st.total_plan_time - lag(st.total_plan_time) OVER (query_w) AS delta_total_plan_time,\n        st.wal_bytes - lag(st.wal_bytes) OVER (query_w) AS delta_wal_bytes,\n        extract('epoch' from st.created - lag(st.created) OVER (query_w)) AS delta_seconds\n    FROM\n        statements_history.statements AS st\n    JOIN\n        statements_history.queries AS q USING (queryid, datname, rolname)\n    JOIN\n        statements_history.snapshots AS s USING (created)\n    WHERE\n        st.created > now() - interval '25 minutes'\n        AND st.created < now() + interval '25 minutes'\n        AND q.query ILIKE 'insert into sensor_measurement%'\n    WINDOW\n        query_w AS (PARTITION BY st.datname, st.rolname, st.queryid, s.stats_reset ORDER BY st.created)\n)\nSELECT\n    created AS \"time\",\n    query,\n    delta_calls / delta_seconds AS calls,\n    delta_plans / delta_seconds AS plans,\n    delta_total_exec_time / delta_seconds / 1000 AS exec_time,\n    delta_total_plan_time / delta_seconds / 1000 AS plan_time,\n    delta_rows / NULLIF(delta_calls, 0) AS rows_per_query,\n    delta_shared_blks_hit / delta_seconds * 8192 AS cache_hit,\n    delta_shared_blks_read / delta_seconds * 8192 AS cache_miss,\n    delta_temp_blks_written / delta_seconds * 8192 AS temp_bytes,\n    delta_wal_bytes / delta_seconds AS wal_bytes,\n    delta_total_exec_time / NULLIF(delta_calls, 0) AS exec_time_per_query,\n    delta_total_plan_time / NULLIF(delta_plans, 0) AS plan_time_per_plan,\n    delta_shared_blks_hit / NULLIF(delta_calls, 0) * 8192 AS cache_hit_per_query,\n    delta_shared_blks_read / NULLIF(delta_calls, 0) * 8192 AS cache_miss_per_query,\n    delta_temp_blks_written / NULLIF(delta_calls, 0) * 8192 AS temp_bytes_written_per_query,\n    delta_wal_bytes / NULLIF(delta_calls, 0) AS wal_bytes_per_query\nFROM\n    deltas\nWHERE\n    delta_calls > 0\nORDER BY\n    created ASC;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "timeFrom": "15m",
      "title": "Query Stats: $measurementQuery",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "uid": "P8E80F9AEF21F6940"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 13
      },
      "hideTimeOverride": false,
      "id": 2,
      "options": {
        "dedupStrategy": "none",
        "enableLogDetails": false,
        "prettifyLogMessage": true,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": false,
        "sortOrder": "Descending",
        "wrapLogMessage": false
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "editorMode": "builder",
          "expr": "{logger=\"$serial_number\"} |= ``",
          "queryType": "range",
          "refId": "A"
        }
      ],
      "timeFrom": "30m",
      "title": "Logs $serial_number",
      "transparent": true,
      "type": "logs"
    }
  ],
  "preload": false,
  "refresh": "auto",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "auto": false,
        "auto_count": 30,
        "auto_min": "10s",
        "current": {
          "text": "1m",
          "value": "1m"
        },
        "name": "bucket_interval",
        "options": [
          {
            "selected": true,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "10m",
            "value": "10m"
          },
          {
            "selected": false,
            "text": "30m",
            "value": "30m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "6h",
            "value": "6h"
          },
          {
            "selected": false,
            "text": "12h",
            "value": "12h"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          },
          {
            "selected": false,
            "text": "7d",
            "value": "7d"
          },
          {
            "selected": false,
            "text": "14d",
            "value": "14d"
          },
          {
            "selected": false,
            "text": "30d",
            "value": "30d"
          }
        ],
        "query": "1m,10m,30m,1h,6h,12h,1d,7d,14d,30d",
        "refresh": 2,
        "type": "interval"
      },
      {
        "current": {
          "text": [
            "AAD-1123"
          ],
          "value": [
            "AAD-1123"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "be9ijnandyz9ce"
        },
        "definition": "SELECT serial_number FROM sensor",
        "includeAll": false,
        "multi": true,
        "name": "serial_number",
        "options": [],
        "query": "SELECT serial_number FROM sensor",
        "refresh": 1,
        "regex": "",
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "text": "INSERT INTO sensor_measurement (time, sensor_id, measurement)\n\t\t\tSELECT * \n\t\t\tFROM unnest(\n\t\t\t\t$1::timestamptz[],\n\t\t\t\t$2::int[],\n\t\t\t\t$3::double precision[]\n\t\t\t) AS t(time, sensor_id, measurement)\n\t\t\tON CONFLICT DO NOTHING",
          "value": "INSERT INTO sensor_measurement (time, sensor_id, measurement)\n\t\t\tSELECT * \n\t\t\tFROM unnest(\n\t\t\t\t$1::timestamptz[],\n\t\t\t\t$2::int[],\n\t\t\t\t$3::double precision[]\n\t\t\t) AS t(time, sensor_id, measurement)\n\t\t\tON CONFLICT DO NOTHING"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "de9iten8jjqiof"
        },
        "definition": "select query from statements_history.queries\nwhere query ILIKE 'insert into sensor_measurement%'",
        "description": "",
        "name": "measurementQuery",
        "options": [],
        "query": "select query from statements_history.queries\nwhere query ILIKE 'insert into sensor_measurement%'",
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-15s",
    "to": "now+20s"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s"
    ]
  },
  "timezone": "browser",
  "title": "IoT",
  "uid": "de9iu4i6taf40f",
  "version": 3,
  "weekStart": ""
}
